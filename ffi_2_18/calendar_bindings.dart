// ignore_for_file: camel_case_types, non_constant_identifier_names, unused_element, unused_field, return_of_invalid_type, void_checks, annotate_overrides, no_leading_underscores_for_local_identifiers, library_private_types_in_public_api,constant_identifier_names,depend_on_referenced_packages
// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;
import 'package:ffi/ffi.dart' as pkg_ffi;

class CalendarLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  CalendarLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  CalendarLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ObjCSel> _registerName1(String name) {
    final cstr = name.toNativeUtf8();
    final sel = _sel_registerName(cstr.cast());
    pkg_ffi.calloc.free(cstr);
    return sel;
  }

  ffi.Pointer<ObjCSel> _sel_registerName(
    ffi.Pointer<ffi.Char> str,
  ) {
    return __sel_registerName(
      str,
    );
  }

  late final __sel_registerNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCSel> Function(
              ffi.Pointer<ffi.Char>)>>('sel_registerName');
  late final __sel_registerName = __sel_registerNamePtr
      .asFunction<ffi.Pointer<ObjCSel> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ObjCObject> _getClass1(String name) {
    final cstr = name.toNativeUtf8();
    final clazz = _objc_getClass(cstr.cast());
    pkg_ffi.calloc.free(cstr);
    if (clazz == ffi.nullptr) {
      throw Exception('Failed to load Objective-C class: $name');
    }
    return clazz;
  }

  ffi.Pointer<ObjCObject> _objc_getClass(
    ffi.Pointer<ffi.Char> str,
  ) {
    return __objc_getClass(
      str,
    );
  }

  late final __objc_getClassPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ffi.Char>)>>('objc_getClass');
  late final __objc_getClass = __objc_getClassPtr
      .asFunction<ffi.Pointer<ObjCObject> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ObjCObject> _objc_retain(
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_retain(
      value,
    );
  }

  late final __objc_retainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('objc_retain');
  late final __objc_retain = __objc_retainPtr
      .asFunction<ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  void _objc_release(
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_release(
      value,
    );
  }

  late final __objc_releasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'objc_release');
  late final __objc_release =
      __objc_releasePtr.asFunction<void Function(ffi.Pointer<ObjCObject>)>();

  late final _objc_releaseFinalizer1 =
      ffi.NativeFinalizer(__objc_releasePtr.cast());
  late final _class_NSCalendarDate1 = _getClass1("NSCalendarDate");
  bool _objc_msgSend_0(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> clazz,
  ) {
    return __objc_msgSend_0(
      obj,
      sel,
      clazz,
    );
  }

  late final __objc_msgSend_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_0 = __objc_msgSend_0Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_isKindOfClass_1 = _registerName1("isKindOfClass:");
  late final _class_NSDate1 = _getClass1("NSDate");
  late final _class_NSObject1 = _getClass1("NSObject");
  late final _sel_load1 = _registerName1("load");
  void _objc_msgSend_1(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_1(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_1 = __objc_msgSend_1Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_initialize1 = _registerName1("initialize");
  late final _sel_init1 = _registerName1("init");
  instancetype _objc_msgSend_2(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_2(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_2Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_2 = __objc_msgSend_2Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_new1 = _registerName1("new");
  late final _sel_allocWithZone_1 = _registerName1("allocWithZone:");
  instancetype _objc_msgSend_3(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_NSZone> zone,
  ) {
    return __objc_msgSend_3(
      obj,
      sel,
      zone,
    );
  }

  late final __objc_msgSend_3Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<_NSZone>)>>('objc_msgSend');
  late final __objc_msgSend_3 = __objc_msgSend_3Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_NSZone>)>();

  late final _sel_alloc1 = _registerName1("alloc");
  late final _sel_dealloc1 = _registerName1("dealloc");
  late final _sel_finalize1 = _registerName1("finalize");
  late final _sel_copy1 = _registerName1("copy");
  late final _sel_mutableCopy1 = _registerName1("mutableCopy");
  late final _sel_copyWithZone_1 = _registerName1("copyWithZone:");
  late final _sel_mutableCopyWithZone_1 =
      _registerName1("mutableCopyWithZone:");
  late final _sel_instancesRespondToSelector_1 =
      _registerName1("instancesRespondToSelector:");
  bool _objc_msgSend_4(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return __objc_msgSend_4(
      obj,
      sel,
      aSelector,
    );
  }

  late final __objc_msgSend_4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_4 = __objc_msgSend_4Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCSel>)>();

  late final _class_Protocol1 = _getClass1("Protocol");
  late final _sel_conformsToProtocol_1 = _registerName1("conformsToProtocol:");
  bool _objc_msgSend_5(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> protocol,
  ) {
    return __objc_msgSend_5(
      obj,
      sel,
      protocol,
    );
  }

  late final __objc_msgSend_5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_5 = __objc_msgSend_5Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_methodForSelector_1 = _registerName1("methodForSelector:");
  IMP _objc_msgSend_6(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return __objc_msgSend_6(
      obj,
      sel,
      aSelector,
    );
  }

  late final __objc_msgSend_6Ptr = _lookup<
      ffi.NativeFunction<
          IMP Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_6 = __objc_msgSend_6Ptr.asFunction<
      IMP Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCSel>)>();

  late final _sel_instanceMethodForSelector_1 =
      _registerName1("instanceMethodForSelector:");
  late final _sel_doesNotRecognizeSelector_1 =
      _registerName1("doesNotRecognizeSelector:");
  void _objc_msgSend_7(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return __objc_msgSend_7(
      obj,
      sel,
      aSelector,
    );
  }

  late final __objc_msgSend_7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_7 = __objc_msgSend_7Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCSel>)>();

  late final _sel_forwardingTargetForSelector_1 =
      _registerName1("forwardingTargetForSelector:");
  ffi.Pointer<ObjCObject> _objc_msgSend_8(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return __objc_msgSend_8(
      obj,
      sel,
      aSelector,
    );
  }

  late final __objc_msgSend_8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_8 = __objc_msgSend_8Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCSel>)>();

  late final _class_NSInvocation1 = _getClass1("NSInvocation");
  late final _sel_forwardInvocation_1 = _registerName1("forwardInvocation:");
  void _objc_msgSend_9(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> anInvocation,
  ) {
    return __objc_msgSend_9(
      obj,
      sel,
      anInvocation,
    );
  }

  late final __objc_msgSend_9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_9 = __objc_msgSend_9Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _class_NSMethodSignature1 = _getClass1("NSMethodSignature");
  late final _sel_methodSignatureForSelector_1 =
      _registerName1("methodSignatureForSelector:");
  ffi.Pointer<ObjCObject> _objc_msgSend_10(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return __objc_msgSend_10(
      obj,
      sel,
      aSelector,
    );
  }

  late final __objc_msgSend_10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_10 = __objc_msgSend_10Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCSel>)>();

  late final _sel_instanceMethodSignatureForSelector_1 =
      _registerName1("instanceMethodSignatureForSelector:");
  late final _sel_allowsWeakReference1 = _registerName1("allowsWeakReference");
  bool _objc_msgSend_11(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_11(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_11 = __objc_msgSend_11Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_retainWeakReference1 = _registerName1("retainWeakReference");
  late final _sel_isSubclassOfClass_1 = _registerName1("isSubclassOfClass:");
  late final _sel_resolveClassMethod_1 = _registerName1("resolveClassMethod:");
  late final _sel_resolveInstanceMethod_1 =
      _registerName1("resolveInstanceMethod:");
  late final _sel_hash1 = _registerName1("hash");
  int _objc_msgSend_12(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_12(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_12Ptr = _lookup<
      ffi.NativeFunction<
          NSUInteger Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_12 = __objc_msgSend_12Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_superclass1 = _registerName1("superclass");
  late final _sel_class1 = _registerName1("class");
  late final _class_NSString1 = _getClass1("NSString");
  late final _sel_stringWithCString_encoding_1 =
      _registerName1("stringWithCString:encoding:");
  ffi.Pointer<ObjCObject> _objc_msgSend_13(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Char> cString,
    int enc,
  ) {
    return __objc_msgSend_13(
      obj,
      sel,
      cString,
      enc,
    );
  }

  late final __objc_msgSend_13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('objc_msgSend');
  late final __objc_msgSend_13 = __objc_msgSend_13Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ffi.Char>, int)>();

  late final _sel_UTF8String1 = _registerName1("UTF8String");
  ffi.Pointer<ffi.Char> _objc_msgSend_14(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_14(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_14 = __objc_msgSend_14Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_description1 = _registerName1("description");
  ffi.Pointer<ObjCObject> _objc_msgSend_15(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_15(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_15 = __objc_msgSend_15Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_debugDescription1 = _registerName1("debugDescription");
  late final _sel_timeIntervalSinceReferenceDate1 =
      _registerName1("timeIntervalSinceReferenceDate");
  double _objc_msgSend_16(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_16(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_16Ptr = _lookup<
      ffi.NativeFunction<
          NSTimeInterval Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_16 = __objc_msgSend_16Ptr.asFunction<
      double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_initWithTimeIntervalSinceReferenceDate_1 =
      _registerName1("initWithTimeIntervalSinceReferenceDate:");
  instancetype _objc_msgSend_17(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    double ti,
  ) {
    return __objc_msgSend_17(
      obj,
      sel,
      ti,
    );
  }

  late final __objc_msgSend_17Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSTimeInterval)>>('objc_msgSend');
  late final __objc_msgSend_17 = __objc_msgSend_17Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, double)>();

  late final _class_NSCoder1 = _getClass1("NSCoder");
  late final _sel_initWithCoder_1 = _registerName1("initWithCoder:");
  instancetype _objc_msgSend_18(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> coder,
  ) {
    return __objc_msgSend_18(
      obj,
      sel,
      coder,
    );
  }

  late final __objc_msgSend_18Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_18 = __objc_msgSend_18Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_dateWithNaturalLanguageString_locale_1 =
      _registerName1("dateWithNaturalLanguageString:locale:");
  ffi.Pointer<ObjCObject> _objc_msgSend_19(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> string,
    ffi.Pointer<ObjCObject> locale,
  ) {
    return __objc_msgSend_19(
      obj,
      sel,
      string,
      locale,
    );
  }

  late final __objc_msgSend_19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_19 = __objc_msgSend_19Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_dateWithNaturalLanguageString_1 =
      _registerName1("dateWithNaturalLanguageString:");
  ffi.Pointer<ObjCObject> _objc_msgSend_20(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> string,
  ) {
    return __objc_msgSend_20(
      obj,
      sel,
      string,
    );
  }

  late final __objc_msgSend_20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_20 = __objc_msgSend_20Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_dateWithString_1 = _registerName1("dateWithString:");
  late final _class_NSTimeZone1 = _getClass1("NSTimeZone");
  late final _sel_dateWithCalendarFormat_timeZone_1 =
      _registerName1("dateWithCalendarFormat:timeZone:");
  ffi.Pointer<ObjCObject> _objc_msgSend_21(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> format,
    ffi.Pointer<ObjCObject> aTimeZone,
  ) {
    return __objc_msgSend_21(
      obj,
      sel,
      format,
      aTimeZone,
    );
  }

  late final __objc_msgSend_21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_21 = __objc_msgSend_21Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_descriptionWithCalendarFormat_timeZone_locale_1 =
      _registerName1("descriptionWithCalendarFormat:timeZone:locale:");
  ffi.Pointer<ObjCObject> _objc_msgSend_22(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> format,
    ffi.Pointer<ObjCObject> aTimeZone,
    ffi.Pointer<ObjCObject> locale,
  ) {
    return __objc_msgSend_22(
      obj,
      sel,
      format,
      aTimeZone,
      locale,
    );
  }

  late final __objc_msgSend_22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_22 = __objc_msgSend_22Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_initWithString_1 = _registerName1("initWithString:");
  late final _sel_calendarDate1 = _registerName1("calendarDate");
  late final _sel_dateWithString_calendarFormat_locale_1 =
      _registerName1("dateWithString:calendarFormat:locale:");
  ffi.Pointer<ObjCObject> _objc_msgSend_23(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> description,
    ffi.Pointer<ObjCObject> format,
    ffi.Pointer<ObjCObject> locale,
  ) {
    return __objc_msgSend_23(
      obj,
      sel,
      description,
      format,
      locale,
    );
  }

  late final __objc_msgSend_23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_23 = __objc_msgSend_23Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_dateWithString_calendarFormat_1 =
      _registerName1("dateWithString:calendarFormat:");
  ffi.Pointer<ObjCObject> _objc_msgSend_24(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> description,
    ffi.Pointer<ObjCObject> format,
  ) {
    return __objc_msgSend_24(
      obj,
      sel,
      description,
      format,
    );
  }

  late final __objc_msgSend_24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_24 = __objc_msgSend_24Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_dateWithYear_month_day_hour_minute_second_timeZone_1 =
      _registerName1("dateWithYear:month:day:hour:minute:second:timeZone:");
  ffi.Pointer<ObjCObject> _objc_msgSend_25(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int year,
    int month,
    int day,
    int hour,
    int minute,
    int second,
    ffi.Pointer<ObjCObject> aTimeZone,
  ) {
    return __objc_msgSend_25(
      obj,
      sel,
      year,
      month,
      day,
      hour,
      minute,
      second,
      aTimeZone,
    );
  }

  late final __objc_msgSend_25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              NSInteger,
              NSUInteger,
              NSUInteger,
              NSUInteger,
              NSUInteger,
              NSUInteger,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_25 = __objc_msgSend_25Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          int,
          int,
          int,
          int,
          int,
          int,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_dateByAddingYears_months_days_hours_minutes_seconds_1 =
      _registerName1("dateByAddingYears:months:days:hours:minutes:seconds:");
  ffi.Pointer<ObjCObject> _objc_msgSend_26(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int year,
    int month,
    int day,
    int hour,
    int minute,
    int second,
  ) {
    return __objc_msgSend_26(
      obj,
      sel,
      year,
      month,
      day,
      hour,
      minute,
      second,
    );
  }

  late final __objc_msgSend_26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              NSInteger,
              NSInteger,
              NSInteger,
              NSInteger,
              NSInteger,
              NSInteger)>>('objc_msgSend');
  late final __objc_msgSend_26 = __objc_msgSend_26Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, int, int, int, int, int, int)>();

  late final _sel_dayOfCommonEra1 = _registerName1("dayOfCommonEra");
  int _objc_msgSend_27(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_27(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_27Ptr = _lookup<
      ffi.NativeFunction<
          NSInteger Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_27 = __objc_msgSend_27Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_dayOfMonth1 = _registerName1("dayOfMonth");
  late final _sel_dayOfWeek1 = _registerName1("dayOfWeek");
  late final _sel_dayOfYear1 = _registerName1("dayOfYear");
  late final _sel_hourOfDay1 = _registerName1("hourOfDay");
  late final _sel_minuteOfHour1 = _registerName1("minuteOfHour");
  late final _sel_monthOfYear1 = _registerName1("monthOfYear");
  late final _sel_secondOfMinute1 = _registerName1("secondOfMinute");
  late final _sel_yearOfCommonEra1 = _registerName1("yearOfCommonEra");
  late final _sel_calendarFormat1 = _registerName1("calendarFormat");
  late final _sel_descriptionWithCalendarFormat_locale_1 =
      _registerName1("descriptionWithCalendarFormat:locale:");
  ffi.Pointer<ObjCObject> _objc_msgSend_28(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> format,
    ffi.Pointer<ObjCObject> locale,
  ) {
    return __objc_msgSend_28(
      obj,
      sel,
      format,
      locale,
    );
  }

  late final __objc_msgSend_28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_28 = __objc_msgSend_28Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_descriptionWithCalendarFormat_1 =
      _registerName1("descriptionWithCalendarFormat:");
  ffi.Pointer<ObjCObject> _objc_msgSend_29(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> format,
  ) {
    return __objc_msgSend_29(
      obj,
      sel,
      format,
    );
  }

  late final __objc_msgSend_29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_29 = __objc_msgSend_29Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_descriptionWithLocale_1 =
      _registerName1("descriptionWithLocale:");
  ffi.Pointer<ObjCObject> _objc_msgSend_30(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> locale,
  ) {
    return __objc_msgSend_30(
      obj,
      sel,
      locale,
    );
  }

  late final __objc_msgSend_30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_30 = __objc_msgSend_30Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_timeZone1 = _registerName1("timeZone");
  ffi.Pointer<ObjCObject> _objc_msgSend_31(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_31(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_31Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_31 = __objc_msgSend_31Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_initWithString_calendarFormat_locale_1 =
      _registerName1("initWithString:calendarFormat:locale:");
  late final _sel_initWithString_calendarFormat_1 =
      _registerName1("initWithString:calendarFormat:");
  late final _sel_initWithYear_month_day_hour_minute_second_timeZone_1 =
      _registerName1("initWithYear:month:day:hour:minute:second:timeZone:");
  late final _sel_setCalendarFormat_1 = _registerName1("setCalendarFormat:");
  void _objc_msgSend_32(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> format,
  ) {
    return __objc_msgSend_32(
      obj,
      sel,
      format,
    );
  }

  late final __objc_msgSend_32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_32 = __objc_msgSend_32Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_setTimeZone_1 = _registerName1("setTimeZone:");
  void _objc_msgSend_33(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> aTimeZone,
  ) {
    return __objc_msgSend_33(
      obj,
      sel,
      aTimeZone,
    );
  }

  late final __objc_msgSend_33Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_33 = __objc_msgSend_33Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_years_months_days_hours_minutes_seconds_sinceDate_1 =
      _registerName1("years:months:days:hours:minutes:seconds:sinceDate:");
  void _objc_msgSend_34(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<NSInteger> yp,
    ffi.Pointer<NSInteger> mop,
    ffi.Pointer<NSInteger> dp,
    ffi.Pointer<NSInteger> hp,
    ffi.Pointer<NSInteger> mip,
    ffi.Pointer<NSInteger> sp,
    ffi.Pointer<ObjCObject> date,
  ) {
    return __objc_msgSend_34(
      obj,
      sel,
      yp,
      mop,
      dp,
      hp,
      mip,
      sp,
      date,
    );
  }

  late final __objc_msgSend_34Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<NSInteger>,
              ffi.Pointer<NSInteger>,
              ffi.Pointer<NSInteger>,
              ffi.Pointer<NSInteger>,
              ffi.Pointer<NSInteger>,
              ffi.Pointer<NSInteger>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_34 = __objc_msgSend_34Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<NSInteger>,
          ffi.Pointer<NSInteger>,
          ffi.Pointer<NSInteger>,
          ffi.Pointer<NSInteger>,
          ffi.Pointer<NSInteger>,
          ffi.Pointer<NSInteger>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_distantFuture1 = _registerName1("distantFuture");
  late final _sel_distantPast1 = _registerName1("distantPast");
}

class _ObjCWrapper implements ffi.Finalizable {
  final ffi.Pointer<ObjCObject> _id;
  final CalendarLibrary _lib;
  bool _pendingRelease;

  _ObjCWrapper._(this._id, this._lib,
      {bool retain = false, bool release = false})
      : _pendingRelease = release {
    if (retain) {
      _lib._objc_retain(_id.cast());
    }
    if (release) {
      _lib._objc_releaseFinalizer1.attach(this, _id.cast(), detach: this);
    }
  }

  /// Releases the reference to the underlying ObjC object held by this wrapper.
  /// Throws a StateError if this wrapper doesn't currently hold a reference.
  void release() {
    if (_pendingRelease) {
      _pendingRelease = false;
      _lib._objc_release(_id.cast());
      _lib._objc_releaseFinalizer1.detach(this);
    } else {
      throw StateError(
          'Released an ObjC object that was unowned or already released.');
    }
  }

  @override
  bool operator ==(Object other) {
    return other is _ObjCWrapper && _id == other._id;
  }

  @override
  int get hashCode => _id.hashCode;
}

class NSCalendarDate extends NSDate {
  NSCalendarDate._(ffi.Pointer<ObjCObject> id, CalendarLibrary lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSCalendarDate] that points to the same underlying object as [other].
  static NSCalendarDate castFrom<T extends _ObjCWrapper>(T other) {
    return NSCalendarDate._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSCalendarDate] that wraps the given raw object pointer.
  static NSCalendarDate castFromPointer(
      CalendarLibrary lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSCalendarDate._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSCalendarDate].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSCalendarDate1);
  }

  static NSObject calendarDate(CalendarLibrary _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSCalendarDate1, _lib._sel_calendarDate1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject dateWithString_calendarFormat_locale_(CalendarLibrary _lib,
      NSString? description, NSString? format, NSObject locale) {
    final _ret = _lib._objc_msgSend_23(
        _lib._class_NSCalendarDate1,
        _lib._sel_dateWithString_calendarFormat_locale_1,
        description?._id ?? ffi.nullptr,
        format?._id ?? ffi.nullptr,
        locale._id);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject dateWithString_calendarFormat_(
      CalendarLibrary _lib, NSString? description, NSString? format) {
    final _ret = _lib._objc_msgSend_24(
        _lib._class_NSCalendarDate1,
        _lib._sel_dateWithString_calendarFormat_1,
        description?._id ?? ffi.nullptr,
        format?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject dateWithYear_month_day_hour_minute_second_timeZone_(
      CalendarLibrary _lib,
      int year,
      int month,
      int day,
      int hour,
      int minute,
      int second,
      NSTimeZone? aTimeZone) {
    final _ret = _lib._objc_msgSend_25(
        _lib._class_NSCalendarDate1,
        _lib._sel_dateWithYear_month_day_hour_minute_second_timeZone_1,
        year,
        month,
        day,
        hour,
        minute,
        second,
        aTimeZone?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSCalendarDate dateByAddingYears_months_days_hours_minutes_seconds_(
      int year, int month, int day, int hour, int minute, int second) {
    final _ret = _lib._objc_msgSend_26(
        _id,
        _lib._sel_dateByAddingYears_months_days_hours_minutes_seconds_1,
        year,
        month,
        day,
        hour,
        minute,
        second);
    return NSCalendarDate._(_ret, _lib, retain: true, release: true);
  }

  int dayOfCommonEra() {
    return _lib._objc_msgSend_27(_id, _lib._sel_dayOfCommonEra1);
  }

  int dayOfMonth() {
    return _lib._objc_msgSend_27(_id, _lib._sel_dayOfMonth1);
  }

  int dayOfWeek() {
    return _lib._objc_msgSend_27(_id, _lib._sel_dayOfWeek1);
  }

  int dayOfYear() {
    return _lib._objc_msgSend_27(_id, _lib._sel_dayOfYear1);
  }

  int hourOfDay() {
    return _lib._objc_msgSend_27(_id, _lib._sel_hourOfDay1);
  }

  int minuteOfHour() {
    return _lib._objc_msgSend_27(_id, _lib._sel_minuteOfHour1);
  }

  int monthOfYear() {
    return _lib._objc_msgSend_27(_id, _lib._sel_monthOfYear1);
  }

  int secondOfMinute() {
    return _lib._objc_msgSend_27(_id, _lib._sel_secondOfMinute1);
  }

  int yearOfCommonEra() {
    return _lib._objc_msgSend_27(_id, _lib._sel_yearOfCommonEra1);
  }

  NSString calendarFormat() {
    final _ret = _lib._objc_msgSend_15(_id, _lib._sel_calendarFormat1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString descriptionWithCalendarFormat_locale_(
      NSString? format, NSObject locale) {
    final _ret = _lib._objc_msgSend_28(
        _id,
        _lib._sel_descriptionWithCalendarFormat_locale_1,
        format?._id ?? ffi.nullptr,
        locale._id);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString descriptionWithCalendarFormat_(NSString? format) {
    final _ret = _lib._objc_msgSend_29(_id,
        _lib._sel_descriptionWithCalendarFormat_1, format?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString descriptionWithLocale_(NSObject locale) {
    final _ret = _lib._objc_msgSend_30(
        _id, _lib._sel_descriptionWithLocale_1, locale._id);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSTimeZone timeZone() {
    final _ret = _lib._objc_msgSend_31(_id, _lib._sel_timeZone1);
    return NSTimeZone._(_ret, _lib, retain: true, release: true);
  }

  NSObject initWithString_calendarFormat_locale_(
      NSString? description, NSString? format, NSObject locale) {
    final _ret = _lib._objc_msgSend_23(
        _id,
        _lib._sel_initWithString_calendarFormat_locale_1,
        description?._id ?? ffi.nullptr,
        format?._id ?? ffi.nullptr,
        locale._id);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject initWithString_calendarFormat_(
      NSString? description, NSString? format) {
    final _ret = _lib._objc_msgSend_24(
        _id,
        _lib._sel_initWithString_calendarFormat_1,
        description?._id ?? ffi.nullptr,
        format?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSObject initWithString_(NSString? description) {
    final _ret = _lib._objc_msgSend_20(
        _id, _lib._sel_initWithString_1, description?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject initWithYear_month_day_hour_minute_second_timeZone_(
      int year,
      int month,
      int day,
      int hour,
      int minute,
      int second,
      NSTimeZone? aTimeZone) {
    final _ret = _lib._objc_msgSend_25(
        _id,
        _lib._sel_initWithYear_month_day_hour_minute_second_timeZone_1,
        year,
        month,
        day,
        hour,
        minute,
        second,
        aTimeZone?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void setCalendarFormat_(NSString? format) {
    return _lib._objc_msgSend_32(
        _id, _lib._sel_setCalendarFormat_1, format?._id ?? ffi.nullptr);
  }

  void setTimeZone_(NSTimeZone? aTimeZone) {
    return _lib._objc_msgSend_33(
        _id, _lib._sel_setTimeZone_1, aTimeZone?._id ?? ffi.nullptr);
  }

  void years_months_days_hours_minutes_seconds_sinceDate_(
      ffi.Pointer<NSInteger> yp,
      ffi.Pointer<NSInteger> mop,
      ffi.Pointer<NSInteger> dp,
      ffi.Pointer<NSInteger> hp,
      ffi.Pointer<NSInteger> mip,
      ffi.Pointer<NSInteger> sp,
      NSCalendarDate? date) {
    return _lib._objc_msgSend_34(
        _id,
        _lib._sel_years_months_days_hours_minutes_seconds_sinceDate_1,
        yp,
        mop,
        dp,
        hp,
        mip,
        sp,
        date?._id ?? ffi.nullptr);
  }

  static NSCalendarDate distantFuture(CalendarLibrary _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSCalendarDate1, _lib._sel_distantFuture1);
    return NSCalendarDate._(_ret, _lib, retain: true, release: true);
  }

  static NSCalendarDate distantPast(CalendarLibrary _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSCalendarDate1, _lib._sel_distantPast1);
    return NSCalendarDate._(_ret, _lib, retain: true, release: true);
  }

  static NSObject dateWithNaturalLanguageString_locale_(
      CalendarLibrary _lib, NSString? string, NSObject locale) {
    final _ret = _lib._objc_msgSend_19(
        _lib._class_NSCalendarDate1,
        _lib._sel_dateWithNaturalLanguageString_locale_1,
        string?._id ?? ffi.nullptr,
        locale._id);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject dateWithNaturalLanguageString_(
      CalendarLibrary _lib, NSString? string) {
    final _ret = _lib._objc_msgSend_20(_lib._class_NSCalendarDate1,
        _lib._sel_dateWithNaturalLanguageString_1, string?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject dateWithString_(CalendarLibrary _lib, NSString? aString) {
    final _ret = _lib._objc_msgSend_20(_lib._class_NSCalendarDate1,
        _lib._sel_dateWithString_1, aString?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSCalendarDate new1(CalendarLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSCalendarDate1, _lib._sel_new1);
    return NSCalendarDate._(_ret, _lib, retain: false, release: true);
  }

  static NSCalendarDate alloc(CalendarLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSCalendarDate1, _lib._sel_alloc1);
    return NSCalendarDate._(_ret, _lib, retain: false, release: true);
  }
}

class ObjCSel extends ffi.Opaque {}

class ObjCObject extends ffi.Opaque {}

class NSDate extends NSObject {
  NSDate._(ffi.Pointer<ObjCObject> id, CalendarLibrary lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSDate] that points to the same underlying object as [other].
  static NSDate castFrom<T extends _ObjCWrapper>(T other) {
    return NSDate._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSDate] that wraps the given raw object pointer.
  static NSDate castFromPointer(
      CalendarLibrary lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSDate._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSDate].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSDate1);
  }

  double get timeIntervalSinceReferenceDate {
    return _lib._objc_msgSend_16(
        _id, _lib._sel_timeIntervalSinceReferenceDate1);
  }

  @override
  NSDate init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  NSDate initWithTimeIntervalSinceReferenceDate_(double ti) {
    final _ret = _lib._objc_msgSend_17(
        _id, _lib._sel_initWithTimeIntervalSinceReferenceDate_1, ti);
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  NSDate initWithCoder_(NSCoder? coder) {
    final _ret = _lib._objc_msgSend_18(
        _id, _lib._sel_initWithCoder_1, coder?._id ?? ffi.nullptr);
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  static NSObject dateWithNaturalLanguageString_locale_(
      CalendarLibrary _lib, NSString? string, NSObject locale) {
    final _ret = _lib._objc_msgSend_19(
        _lib._class_NSDate1,
        _lib._sel_dateWithNaturalLanguageString_locale_1,
        string?._id ?? ffi.nullptr,
        locale._id);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject dateWithNaturalLanguageString_(
      CalendarLibrary _lib, NSString? string) {
    final _ret = _lib._objc_msgSend_20(_lib._class_NSDate1,
        _lib._sel_dateWithNaturalLanguageString_1, string?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject dateWithString_(CalendarLibrary _lib, NSString? aString) {
    final _ret = _lib._objc_msgSend_20(_lib._class_NSDate1,
        _lib._sel_dateWithString_1, aString?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSCalendarDate dateWithCalendarFormat_timeZone_(
      NSString? format, NSTimeZone? aTimeZone) {
    final _ret = _lib._objc_msgSend_21(
        _id,
        _lib._sel_dateWithCalendarFormat_timeZone_1,
        format?._id ?? ffi.nullptr,
        aTimeZone?._id ?? ffi.nullptr);
    return NSCalendarDate._(_ret, _lib, retain: true, release: true);
  }

  NSString descriptionWithCalendarFormat_timeZone_locale_(
      NSString? format, NSTimeZone? aTimeZone, NSObject locale) {
    final _ret = _lib._objc_msgSend_22(
        _id,
        _lib._sel_descriptionWithCalendarFormat_timeZone_locale_1,
        format?._id ?? ffi.nullptr,
        aTimeZone?._id ?? ffi.nullptr,
        locale._id);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSObject initWithString_(NSString? description) {
    final _ret = _lib._objc_msgSend_20(
        _id, _lib._sel_initWithString_1, description?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSDate new1(CalendarLibrary _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSDate1, _lib._sel_new1);
    return NSDate._(_ret, _lib, retain: false, release: true);
  }

  static NSDate alloc(CalendarLibrary _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSDate1, _lib._sel_alloc1);
    return NSDate._(_ret, _lib, retain: false, release: true);
  }
}

class NSObject extends _ObjCWrapper {
  NSObject._(ffi.Pointer<ObjCObject> id, CalendarLibrary lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSObject] that points to the same underlying object as [other].
  static NSObject castFrom<T extends _ObjCWrapper>(T other) {
    return NSObject._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSObject] that wraps the given raw object pointer.
  static NSObject castFromPointer(
      CalendarLibrary lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSObject._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSObject].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSObject1);
  }

  static void load(CalendarLibrary _lib) {
    return _lib._objc_msgSend_1(_lib._class_NSObject1, _lib._sel_load1);
  }

  static void initialize(CalendarLibrary _lib) {
    return _lib._objc_msgSend_1(_lib._class_NSObject1, _lib._sel_initialize1);
  }

  NSObject init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject new1(CalendarLibrary _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSObject1, _lib._sel_new1);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  static NSObject allocWithZone_(
      CalendarLibrary _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSObject1, _lib._sel_allocWithZone_1, zone);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  static NSObject alloc(CalendarLibrary _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSObject1, _lib._sel_alloc1);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  void dealloc() {
    return _lib._objc_msgSend_1(_id, _lib._sel_dealloc1);
  }

  void finalize() {
    return _lib._objc_msgSend_1(_id, _lib._sel_finalize1);
  }

  NSObject copy() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_copy1);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  NSObject mutableCopy() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_mutableCopy1);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  static NSObject copyWithZone_(
      CalendarLibrary _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSObject1, _lib._sel_copyWithZone_1, zone);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  static NSObject mutableCopyWithZone_(
      CalendarLibrary _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSObject1, _lib._sel_mutableCopyWithZone_1, zone);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  static bool instancesRespondToSelector_(
      CalendarLibrary _lib, ffi.Pointer<ObjCSel> aSelector) {
    return _lib._objc_msgSend_4(_lib._class_NSObject1,
        _lib._sel_instancesRespondToSelector_1, aSelector);
  }

  static bool conformsToProtocol_(CalendarLibrary _lib, Protocol? protocol) {
    return _lib._objc_msgSend_5(_lib._class_NSObject1,
        _lib._sel_conformsToProtocol_1, protocol?._id ?? ffi.nullptr);
  }

  IMP methodForSelector_(ffi.Pointer<ObjCSel> aSelector) {
    return _lib._objc_msgSend_6(_id, _lib._sel_methodForSelector_1, aSelector);
  }

  static IMP instanceMethodForSelector_(
      CalendarLibrary _lib, ffi.Pointer<ObjCSel> aSelector) {
    return _lib._objc_msgSend_6(_lib._class_NSObject1,
        _lib._sel_instanceMethodForSelector_1, aSelector);
  }

  void doesNotRecognizeSelector_(ffi.Pointer<ObjCSel> aSelector) {
    return _lib._objc_msgSend_7(
        _id, _lib._sel_doesNotRecognizeSelector_1, aSelector);
  }

  NSObject forwardingTargetForSelector_(ffi.Pointer<ObjCSel> aSelector) {
    final _ret = _lib._objc_msgSend_8(
        _id, _lib._sel_forwardingTargetForSelector_1, aSelector);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void forwardInvocation_(NSInvocation? anInvocation) {
    return _lib._objc_msgSend_9(
        _id, _lib._sel_forwardInvocation_1, anInvocation?._id ?? ffi.nullptr);
  }

  NSMethodSignature methodSignatureForSelector_(
      ffi.Pointer<ObjCSel> aSelector) {
    final _ret = _lib._objc_msgSend_10(
        _id, _lib._sel_methodSignatureForSelector_1, aSelector);
    return NSMethodSignature._(_ret, _lib, retain: true, release: true);
  }

  static NSMethodSignature instanceMethodSignatureForSelector_(
      CalendarLibrary _lib, ffi.Pointer<ObjCSel> aSelector) {
    final _ret = _lib._objc_msgSend_10(_lib._class_NSObject1,
        _lib._sel_instanceMethodSignatureForSelector_1, aSelector);
    return NSMethodSignature._(_ret, _lib, retain: true, release: true);
  }

  bool allowsWeakReference() {
    return _lib._objc_msgSend_11(_id, _lib._sel_allowsWeakReference1);
  }

  bool retainWeakReference() {
    return _lib._objc_msgSend_11(_id, _lib._sel_retainWeakReference1);
  }

  static bool isSubclassOfClass_(CalendarLibrary _lib, NSObject aClass) {
    return _lib._objc_msgSend_0(
        _lib._class_NSObject1, _lib._sel_isSubclassOfClass_1, aClass._id);
  }

  static bool resolveClassMethod_(
      CalendarLibrary _lib, ffi.Pointer<ObjCSel> sel) {
    return _lib._objc_msgSend_4(
        _lib._class_NSObject1, _lib._sel_resolveClassMethod_1, sel);
  }

  static bool resolveInstanceMethod_(
      CalendarLibrary _lib, ffi.Pointer<ObjCSel> sel) {
    return _lib._objc_msgSend_4(
        _lib._class_NSObject1, _lib._sel_resolveInstanceMethod_1, sel);
  }

  static int hash(CalendarLibrary _lib) {
    return _lib._objc_msgSend_12(_lib._class_NSObject1, _lib._sel_hash1);
  }

  static NSObject superclass(CalendarLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSObject1, _lib._sel_superclass1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject class1(CalendarLibrary _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSObject1, _lib._sel_class1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSString description(CalendarLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_15(_lib._class_NSObject1, _lib._sel_description1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString debugDescription(CalendarLibrary _lib) {
    final _ret = _lib._objc_msgSend_15(
        _lib._class_NSObject1, _lib._sel_debugDescription1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }
}

typedef instancetype = ffi.Pointer<ObjCObject>;

class _NSZone extends ffi.Opaque {}

class Protocol extends _ObjCWrapper {
  Protocol._(ffi.Pointer<ObjCObject> id, CalendarLibrary lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [Protocol] that points to the same underlying object as [other].
  static Protocol castFrom<T extends _ObjCWrapper>(T other) {
    return Protocol._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [Protocol] that wraps the given raw object pointer.
  static Protocol castFromPointer(
      CalendarLibrary lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return Protocol._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [Protocol].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_Protocol1);
  }
}

typedef IMP = ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>;

class NSInvocation extends _ObjCWrapper {
  NSInvocation._(ffi.Pointer<ObjCObject> id, CalendarLibrary lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSInvocation] that points to the same underlying object as [other].
  static NSInvocation castFrom<T extends _ObjCWrapper>(T other) {
    return NSInvocation._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSInvocation] that wraps the given raw object pointer.
  static NSInvocation castFromPointer(
      CalendarLibrary lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSInvocation._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSInvocation].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSInvocation1);
  }
}

class NSMethodSignature extends _ObjCWrapper {
  NSMethodSignature._(ffi.Pointer<ObjCObject> id, CalendarLibrary lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSMethodSignature] that points to the same underlying object as [other].
  static NSMethodSignature castFrom<T extends _ObjCWrapper>(T other) {
    return NSMethodSignature._(other._id, other._lib,
        retain: true, release: true);
  }

  /// Returns a [NSMethodSignature] that wraps the given raw object pointer.
  static NSMethodSignature castFromPointer(
      CalendarLibrary lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSMethodSignature._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSMethodSignature].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSMethodSignature1);
  }
}

typedef NSUInteger = ffi.UnsignedLong;

class NSString extends _ObjCWrapper {
  NSString._(ffi.Pointer<ObjCObject> id, CalendarLibrary lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSString] that points to the same underlying object as [other].
  static NSString castFrom<T extends _ObjCWrapper>(T other) {
    return NSString._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSString] that wraps the given raw object pointer.
  static NSString castFromPointer(
      CalendarLibrary lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSString._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSString].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSString1);
  }

  factory NSString(CalendarLibrary _lib, String str) {
    final cstr = str.toNativeUtf8();
    final nsstr = stringWithCString_encoding_(_lib, cstr.cast(), 4 /* UTF8 */);
    pkg_ffi.calloc.free(cstr);
    return nsstr;
  }

  @override
  String toString() => (UTF8String).cast<pkg_ffi.Utf8>().toDartString();
  static NSString stringWithCString_encoding_(
      CalendarLibrary _lib, ffi.Pointer<ffi.Char> cString, int enc) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSString1,
        _lib._sel_stringWithCString_encoding_1, cString, enc);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  ffi.Pointer<ffi.Char> get UTF8String {
    return _lib._objc_msgSend_14(_id, _lib._sel_UTF8String1);
  }
}

extension StringToNSString on String {
  NSString toNSString(CalendarLibrary lib) => NSString(lib, this);
}

typedef NSTimeInterval = ffi.Double;

class NSCoder extends _ObjCWrapper {
  NSCoder._(ffi.Pointer<ObjCObject> id, CalendarLibrary lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSCoder] that points to the same underlying object as [other].
  static NSCoder castFrom<T extends _ObjCWrapper>(T other) {
    return NSCoder._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSCoder] that wraps the given raw object pointer.
  static NSCoder castFromPointer(
      CalendarLibrary lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSCoder._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSCoder].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSCoder1);
  }
}

class NSTimeZone extends _ObjCWrapper {
  NSTimeZone._(ffi.Pointer<ObjCObject> id, CalendarLibrary lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSTimeZone] that points to the same underlying object as [other].
  static NSTimeZone castFrom<T extends _ObjCWrapper>(T other) {
    return NSTimeZone._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSTimeZone] that wraps the given raw object pointer.
  static NSTimeZone castFromPointer(
      CalendarLibrary lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSTimeZone._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSTimeZone].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSTimeZone1);
  }
}

typedef NSInteger = ffi.Long;
